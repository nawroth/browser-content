import org.asciidoctor.Asciidoctor
import org.asciidoctor.OptionsBuilder
import org.asciidoctor.SafeMode

buildscript {
    ext {
        asciidoctorjVersion = '1.6.0-alpha.1'
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
    }

    repositories {
        jcenter()
    }
}

apply plugin: 'base'

defaultTasks 'browserGuide', 'guides', 'help'

ext {
    asciidoctorAttributes = [
            'attribute-missing': 'warn',
            'experimental'     : '',
            'icons'            : 'font',
            'imagesdir'        : './images',
            'sectanchors!'     : '',
            'toc'              : '',
    ]
    adoc = null
}

task('cleanOutputs', dependsOn: ['cleanBrowserGuide', 'cleanGuides', 'cleanHelp']) {
    description 'Clean the HTML outputs.'
}

def getAsciidoctor() {
    if (project.ext.adoc == null) {
        project.ext.adoc = Asciidoctor.Factory.create()
    }
    project.ext.adoc
}

def buildAdocDir(srcDir, targetDir, templateDir) {
    FileTree tree = fileTree(dir: srcDir)
    tree.include '*.adoc'
    def attrs = project.ext.asciidoctorAttributes
    def opts = OptionsBuilder.options()
            .backend('html5')
            .safe(SafeMode.UNSAFE)
            .toDir(new File(targetDir))
            .mkDirs(true)
            .attributes(attrs)
            .templateDir(templateDir)
    getAsciidoctor().convertFiles(tree.getFiles(), opts.get())
}

def asciidocSourceDir = "${projectDir}/src/main/asciidoc"
def guidesSourceDir = "$asciidocSourceDir/guides"
def helpSourceDir = "$asciidocSourceDir/help"
def asciidocResourcesDir = "${projectDir}/src/main/resources"
def asciidocTemplateDir = new File("$asciidocResourcesDir/erb")
def htmlOutputDir = "$buildDir/html5"
def guidesOutputDir = "$htmlOutputDir/guides"
def helpOutputDir = "$htmlOutputDir/help"

task('browserGuide') {
    description 'Build Asciidoctor HTML output.'
    inputs.file "$asciidocSourceDir/browser.adoc"
    inputs.dir asciidocTemplateDir
    outputs.dir htmlOutputDir
    doLast {
        buildAdocDir(asciidocSourceDir, htmlOutputDir, asciidocTemplateDir)
    }
}

task('guides') {
    description 'Build Asciidoctor HTML output for guides.'
    inputs.dir guidesSourceDir
    inputs.dir asciidocTemplateDir
    outputs.dir guidesOutputDir
    doLast {
        buildAdocDir(guidesSourceDir, guidesOutputDir, asciidocTemplateDir)
    }
}

task('help') {
    description 'Build Asciidoctor HTML output for guides.'
    inputs.dir helpSourceDir
    inputs.dir asciidocTemplateDir
    outputs.dir helpOutputDir
    doLast {
        buildAdocDir(helpSourceDir, helpOutputDir, asciidocTemplateDir)
    }
}

task('dist', dependsOn: ['browserGuide', 'guides', 'help']) {
    description 'Build all outputs.'
}

task buildScriptDependencies(type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
    description 'Print the build script dependencies.'
    configurations = project.buildscript.configurations
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
